# pages/4_Simulador_Borde_Fresnel.py

"""
Simulador de Difracci√≥n de Fresnel por Bordes

Este script de Streamlit crea una herramienta interactiva para visualizar y
estudiar la difracci√≥n de Fresnel. Permite al usuario simular el patr√≥n de
difracci√≥n generado por uno o dos bordes rectos.

Funcionalidades principales:
- Simulaci√≥n para un √∫nico borde semi-infinito.
- Simulaci√≥n para una rendija, activando un segundo borde.
- Controles interactivos (sliders) para ajustar la longitud de onda, la distancia
  a la pantalla, el ancho de visualizaci√≥n y la posici√≥n/separaci√≥n de los bordes.
- C√°lculo y visualizaci√≥n del N√∫mero de Fresnel ($N_F$) para el caso de la rendija.
- Generaci√≥n de dos gr√°ficos:
  1. Un perfil de intensidad 1D del patr√≥n de difracci√≥n.
  2. Una representaci√≥n visual 2D (mapa de calor) que simula la apariencia del
     patr√≥n en una pantalla.

El c√≥digo utiliza el estado de sesi√≥n de Streamlit (st.session_state) para
mantener la interactividad y el decorador @st.cache_data para optimizar el
rendimiento de los c√°lculos.
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from scipy.special import fresnel

# --- Funciones de C√°lculo ---

@st.cache_data
def calculate_diffraction_pattern(lambda_val, D_val, screen_width, edge_1_pos, enable_edge_2=False, edge_2_pos=0.0, resolution=2000):
    """
    Calcula el patr√≥n de difracci√≥n de Fresnel para uno o dos bordes.

    Esta funci√≥n es el motor de c√°lculo principal. Puede operar en dos modos:
    1. Borde √∫nico (enable_edge_2=False): Calcula el patr√≥n para una obstrucci√≥n
       semi-infinita.
    2. Doble borde / Rendija (enable_edge_2=True): Calcula el patr√≥n para una
       apertura definida por dos bordes.

    Args:
        lambda_val (float): Longitud de onda de la luz en metros.
        D_val (float): Distancia del obst√°culo a la pantalla en metros.
        screen_width (float): Ancho de la pantalla de visualizaci√≥n en metros.
        edge_1_pos (float): Posici√≥n del primer borde en metros.
        enable_edge_2 (bool): Flag para activar el modo de segundo borde (rendija).
        edge_2_pos (float): Posici√≥n del segundo borde en metros (si est√° activado).
        resolution (int): N√∫mero de puntos para calcular el patr√≥n.

    Returns:
        tuple: Una tupla conteniendo:
            - x_prime (np.array): Coordenadas de posici√≥n en la pantalla (m).
            - intensity (np.array): Intensidad relativa del patr√≥n de difracci√≥n.
    """
    # Genera el eje de coordenadas en la pantalla
    x_prime = np.linspace(-screen_width / 2, screen_width / 2, resolution)
    # Factor de escala com√∫n para los argumentos de las integrales de Fresnel
    u_factor = np.sqrt(2 / (lambda_val * D_val))

    if not enable_edge_2:
        # --- C√°lculo para Borde √önico ---
        # El patr√≥n depende de la integral de Fresnel evaluada desde -inf hasta v
        v = (x_prime - edge_1_pos) * u_factor
        S_v, C_v = fresnel(v)
        intensity = 0.5 * ((C_v + 0.5)**2 + (S_v + 0.5)**2)
    else:
        # --- C√°lculo para Doble Borde (Rendija) ---
        # El patr√≥n depende de la diferencia de las integrales de Fresnel
        # evaluadas en las posiciones de cada borde.
        u1 = (x_prime - edge_1_pos) * u_factor
        u2 = (x_prime - edge_2_pos) * u_factor
        Su1, Cu1 = fresnel(u1)
        Su2, Cu2 = fresnel(u2)
        intensity = 0.5 * ((Cu2 - Cu1)**2 + (Su2 - Su1)**2)
        # Normaliza la intensidad para el caso de la rendija
        if np.max(intensity) > 0:
            intensity = intensity / np.max(intensity)

    return x_prime, intensity

def generate_heatmap(x_coords, intensity_1D):
    """
    Crea un mapa de calor 2D a partir de un patr√≥n de intensidad 1D.

    Simula la apariencia visual del patr√≥n de difracci√≥n repitiendo la l√≠nea
    de intensidad verticalmente.

    Args:
        x_coords (np.array): Coordenadas del eje x (no se usa directamente pero es parte del est√°ndar).
        intensity_1D (np.array): El perfil de intensidad 1D a visualizar.

    Returns:
        np.array: Una matriz 2D (imagen) que representa el patr√≥n.
    """
    y_res = 512 # Resoluci√≥n vertical de la imagen
    # np.tile repite el array 1D `y_res` veces para formar la imagen
    heatmap = np.tile(intensity_1D, (y_res, 1))
    return heatmap

# --- Interfaz de Streamlit ---
# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Difracci√≥n de Fresnel por Bordes", page_icon="üî™", layout="wide")
st.title("üî™ Difracci√≥n de Fresnel por Bordes")
st.markdown("Usa los controles para simular la difracci√≥n de uno o dos bordes (rendija).")

# --- Inicializaci√≥n del Estado de la Sesi√≥n ---
# Define los valores por defecto para los widgets.
# st.session_state se usa para mantener los valores de los controles entre
# las interacciones del usuario. Este bloque se ejecuta solo una vez.
defaults = {
    "lambda_nm": 550.0, "D_m": 1.0, "screen_mm": 10.0,
    "edge_1_pos_mm": -1.0,
    "slit_separation_mm": 0.75
}
for key, value in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = value

# --- Controles en la Barra Lateral ---
st.sidebar.header("Par√°metros de la Simulaci√≥n")

# Sliders para los par√°metros f√≠sicos. El argumento 'key' los vincula
# directamente con st.session_state, manejando la actualizaci√≥n autom√°ticamente.
st.sidebar.slider(
    "Longitud de Onda (Œª, nm)",
    min_value=380.0, max_value=750.0,
    step=0.1, format="%.1f",
    key="lambda_nm"
)
st.sidebar.slider(
    "Distancia al Obst√°culo (D, m)",
    min_value=1, max_value=10.0,
    step=0.01, format="%.2f",
    key="D_m"
)
st.sidebar.slider(
    "Ancho de Visualizaci√≥n (mm)",
    min_value=1.0, max_value=40.0,
    step=0.1, format="%.1f",
    key="screen_mm"
)

st.sidebar.markdown("---")
st.sidebar.subheader("Configuraci√≥n de Bordes")

# Checkbox para cambiar entre el modo de borde √∫nico y el de rendija
enable_edge_2 = st.sidebar.checkbox("Habilitar segundo borde (rendija)")

# Slider para la posici√≥n del primer borde. Se deshabilita si el modo rendija
# est√° activo, ya que en ese caso las posiciones se calculan autom√°ticamente.
st.sidebar.slider(
    "Posici√≥n 1er Borde (mm)",
    min_value=-st.session_state.screen_mm/2, max_value=st.session_state.screen_mm/2,
    step=0.1, format="%.2f",
    key="edge_1_pos_mm",
    disabled=enable_edge_2
)

edge_2_pos_val = 0.0 # Valor por defecto para la posici√≥n del segundo borde

# Este bloque solo se ejecuta si el usuario activa el modo rendija
if enable_edge_2:
    st.sidebar.slider(
        "Separaci√≥n entre bordes (mm)",
        min_value=0.01, max_value=2.0,
        step=0.01, format="%.2f",
        key="slit_separation_mm"
    )

    # Calcula la posici√≥n de los bordes para centrar la rendija en x=0
    edge_1_pos_val = - (st.session_state.slit_separation_mm / 2) * 1e-3
    edge_2_pos_val = (st.session_state.slit_separation_mm / 2) * 1e-3
    st.sidebar.info(f"Bordes en {edge_1_pos_val*1000:.3f} mm y {edge_2_pos_val*1000:.3f} mm")

    # Calcula y muestra el N√∫mero de Fresnel, relevante para la rendija
    slit_width_m = st.session_state.slit_separation_mm * 1e-3
    lambda_val = st.session_state.lambda_nm * 1e-9
    D_val = st.session_state.D_m
    fresnel_number = (slit_width_m**2) / (lambda_val * D_val)
    st.sidebar.metric(label="N√∫mero de Fresnel (NF)", value=f"{fresnel_number:.4f}")

# --- SIMULACI√ìN Y VISUALIZACI√ìN ---
st.markdown("---")
# Actualiza el t√≠tulo principal seg√∫n el modo seleccionado
if enable_edge_2:
    st.subheader(f"Patr√≥n de Rendija de {st.session_state.slit_separation_mm:.2f} mm")
else:
    st.subheader("Patr√≥n de Borde √önico")

# Convierte las unidades de los par√°metros a SI (metros) para los c√°lculos
lambda_val = st.session_state.lambda_nm * 1e-9
D_val = st.session_state.D_m
screen_width_m = st.session_state.screen_mm * 1e-3

# Asegura que la posici√≥n del borde est√© en metros para el modo de borde √∫nico
if not enable_edge_2:
    edge_1_pos_val = st.session_state.edge_1_pos_mm * 1e-3

# Llama a la funci√≥n de c√°lculo principal
x_coords, intensity = calculate_diffraction_pattern(
    lambda_val, D_val, screen_width_m, edge_1_pos_val,
    enable_edge_2=enable_edge_2, edge_2_pos=edge_2_pos_val
)
# Genera la imagen 2D del patr√≥n
heatmap = generate_heatmap(x_coords, intensity)

# --- Gr√°ficas ---
# Crea una figura con dos subplots apilados verticalmente
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), sharex=True, gridspec_kw={'height_ratios': [2, 1]})

# Subplot superior: Perfil de intensidad 1D
ax1.plot(x_coords * 1000, intensity, color='dodgerblue', lw=2)
# Dibuja l√≠neas verticales para marcar la posici√≥n de los bordes
ax1.axvline(x=edge_1_pos_val * 1000, color='k', linestyle='--', lw=1.5, label=f'Borde 1 ({edge_1_pos_val*1000:.2f} mm)')

if enable_edge_2:
    ax1.axvline(x=edge_2_pos_val * 1000, color='k', linestyle=':', lw=1.5, label=f'Borde 2 ({edge_2_pos_val*1000:.2f} mm)')

    # Recalcula el NF aqu√≠ para asegurar que el t√≠tulo est√© siempre actualizado
    slit_width_m_plot = st.session_state.slit_separation_mm * 1e-3
    lambda_val_plot = st.session_state.lambda_nm * 1e-9
    D_val_plot = st.session_state.D_m
    fresnel_number_plot = (slit_width_m_plot**2) / (lambda_val_plot * D_val_plot)

    # T√≠tulo din√°mico para el modo rendija (versi√≥n de texto plano para evitar errores)
    ax1.set_title(f"Patr√≥n de Rendija | N√∫mero de Fresnel NF ‚âà {fresnel_number_plot:.4f}", fontsize=14)

else:
    # T√≠tulo para el modo de borde √∫nico
    ax1.set_title("Patr√≥n de Borde √önico", fontsize=14)

ax1.set_ylabel('Intensidad Relativa'); ax1.grid(True, linestyle=':'); ax1.legend()
ax1.set_ylim(bottom=0)
ax1.set_xlim(x_coords.min()*1000, x_coords.max()*1000)

# Subplot inferior: Visualizaci√≥n 2D del patr√≥n
ax2.imshow(heatmap, cmap='gray', aspect='auto', extent=[x_coords.min()*1000, x_coords.max()*1000, -1, 1])
ax2.set_xlabel("Posici√≥n en la pantalla x' (mm)"); ax2.get_yaxis().set_visible(False)

# Ajusta el layout para que no haya solapamientos y muestra la figura en Streamlit
fig.tight_layout()
st.pyplot(fig)