# pages/3_Simulador_Rendija_Fresnel.py

"""
Simulador de Difracci√≥n por Rendija √önica

Este script de Streamlit permite visualizar la difracci√≥n de la luz a trav√©s de
una sola rendija. El prop√≥sito principal es mostrar la evoluci√≥n del patr√≥n de
difracci√≥n desde el r√©gimen de campo cercano (Fresnel) hasta el r√©gimen de campo
lejano (Fraunhofer) a medida que cambia la distancia entre la rendija y la pantalla.

El simulador presenta varias visualizaciones interactivas:
1. Comparaci√≥n directa entre los patrones de Fresnel y Fraunhofer para una distancia dada.
2. Un mapa de calor que muestra la evoluci√≥n del patr√≥n a lo largo de la distancia.
3. Un gr√°fico que muestra la convergencia (diferencia) entre ambos patrones.
4. Una representaci√≥n visual del patr√≥n de difracci√≥n en la pantalla.
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from scipy.special import fresnel

# --- Funciones de C√°lculo ---

def calculate_fresnel(b_val, lambda_val, D_val, screen_width, resolution=1000):
    """
    Calcula el patr√≥n de intensidad para la difracci√≥n de Fresnel y Fraunhofer.

    Esta es la funci√≥n central de f√≠sica que calcula la intensidad de la luz en la
    pantalla bas√°ndose en los par√°metros de la rendija y la luz.

    Args:
        b_val (float): Ancho de la rendija 'b' en metros.
        lambda_val (float): Longitud de onda de la luz 'Œª' en metros.
        D_val (float): Distancia de la rendija a la pantalla 'D' en metros.
        screen_width (float): Ancho de la pantalla de visualizaci√≥n en metros.
        resolution (int): N√∫mero de puntos a calcular en la pantalla.

    Returns:
        tuple: Una tupla conteniendo:
            - x_prime (np.array): Coordenadas de posici√≥n en la pantalla (m).
            - intensity_norm (np.array): Intensidad normalizada del patr√≥n de Fresnel.
            - intensity_fraunhofer (np.array): Intensidad normalizada del patr√≥n de Fraunhofer.
            - NF (float): El n√∫mero de Fresnel calculado para esta configuraci√≥n.
    """
    # C√°lculo del N√∫mero de Fresnel (par√°metro adimensional)
    NF = (b_val**2) / (lambda_val * D_val)

    # Coordenadas en la pantalla de visualizaci√≥n
    x_prime = np.linspace(-screen_width / 2, screen_width / 2, resolution)

    # Factor de escala para los argumentos de las integrales de Fresnel
    u_factor = np.sqrt(2 / (lambda_val * D_val))

    # L√≠mites de integraci√≥n para la integral de Fresnel
    u1 = u_factor * (x_prime - b_val / 2)
    u2 = u_factor * (x_prime + b_val / 2)

    # C√°lculo de las integrales de Fresnel (S y C) usando la librer√≠a SciPy
    Su1, Cu1 = fresnel(u1)
    Su2, Cu2 = fresnel(u2)

    # C√°lculo de la intensidad seg√∫n la teor√≠a de la difracci√≥n de Fresnel
    intensity = 0.5 * ((Cu2 - Cu1)**2 + (Su2 - Su1)**2)

    # Normalizaci√≥n de la intensidad para que el valor m√°ximo sea 1.0
    if np.max(intensity) > 0:
        intensity_norm = intensity / np.max(intensity)
    else:
        intensity_norm = intensity

    # C√°lculo del patr√≥n de difracci√≥n de Fraunhofer (aproximaci√≥n de campo lejano)
    # usando la funci√≥n sinc
    sinc_arg = (np.pi * b_val * x_prime) / (lambda_val * D_val)
    intensity_fraunhofer = (np.sinc(sinc_arg / np.pi))**2

    return x_prime, intensity_norm, intensity_fraunhofer, NF

@st.cache_data
def precompute_distance_data(b_um, start_m, end_m, step_m, lambda_nm, screen_mm):
    """
    Pre-calcula los patrones de difracci√≥n para un rango de distancias 'D'.

    Optimiza la respuesta del slider principal, evitando recalcular en tiempo real.
    El decorador @st.cache_data almacena los resultados en cach√©.

    Args:
        b_um (float): Ancho de la rendija en micr√≥metros.
        start_m (float): Distancia inicial del rango en metros.
        end_m (float): Distancia final del rango en metros.
        step_m (float): Paso entre distancias en metros.
        lambda_nm (float): Longitud de onda en nan√≥metros.
        screen_mm (float): Ancho de la pantalla en mil√≠metros.

    Returns:
        dict: Un diccionario donde las claves son las distancias 'D' y los valores
              son los resultados de calculate_fresnel para esa distancia.
    """
    results = {}
    # Conversi√≥n de unidades a SI (metros)
    lambda_val = lambda_nm * 1e-9
    screen_width = screen_mm * 1e-3
    b_val = b_um * 1e-6

    # Itera sobre el rango de distancias y calcula el patr√≥n para cada una
    for D_val in np.arange(start_m, end_m + step_m, step_m):
        D_key = round(D_val, 4) # Clave redondeada para consistencia
        results[D_key] = calculate_fresnel(b_val, lambda_val, D_key, screen_width, resolution=1000)
    return results

@st.cache_data
def precompute_heatmap_data(b_um, lambda_nm, D_max_m, screen_mm):
    """
    Pre-calcula los datos para el mapa de calor de evoluci√≥n (intensidad vs. distancia).

    Args:
        b_um (float): Ancho de la rendija en micr√≥metros.
        lambda_nm (float): Longitud de onda en nan√≥metros.
        D_max_m (float): Distancia m√°xima para el mapa de calor en metros.
        screen_mm (float): Ancho de la pantalla en mil√≠metros.

    Returns:
        tuple: Una tupla conteniendo:
            - D_array (np.array): Eje de distancias para el mapa.
            - x_prime_array (np.array): Eje de posiciones para el mapa.
            - intensity_map (np.array): Matriz 2D de intensidades.
    """
    lambda_val = lambda_nm * 1e-9
    screen_width = screen_mm * 1e-3
    b_val = b_um * 1e-6
    # Resoluciones para los ejes del mapa de calor
    heatmap_x_res = 150
    heatmap_y_res = 400
    D_array = np.linspace(0.001, D_max_m, heatmap_x_res)
    x_prime_array = np.linspace(-screen_width / 2, screen_width / 2, heatmap_y_res)

    intensity_map = np.zeros((len(x_prime_array), len(D_array)))
    # Rellena la matriz de intensidad calculando el patr√≥n para cada distancia
    for i, D_val in enumerate(D_array):
        _, intensity_1D, _, _ = calculate_fresnel(b_val, lambda_val, D_val, screen_width, resolution=heatmap_y_res)
        intensity_map[:, i] = intensity_1D
    return D_array, x_prime_array, intensity_map

@st.cache_data
def precompute_difference_data(b_um, start_m, end_m, lambda_nm, screen_mm):
    """
    Pre-calcula la diferencia entre los patrones de Fresnel y Fraunhofer.

    Esto se usa para el gr√°fico de convergencia, que muestra c√≥mo el patr√≥n
    de Fresnel se aproxima al de Fraunhofer a medida que aumenta la distancia.

    Args:
        b_um (float): Ancho de la rendija en micr√≥metros.
        start_m (float): Distancia inicial del rango en metros.
        end_m (float): Distancia final del rango en metros.
        lambda_nm (float): Longitud de onda en nan√≥metros.
        screen_mm (float): Ancho de la pantalla en mil√≠metros.

    Returns:
        list: Una lista de tuplas, cada una con datos para una distancia espec√≠fica.
    """
    diff_results = []
    # Selecciona 10 puntos de distancia para mostrar en el gr√°fico
    D_values = np.linspace(start_m, end_m, 10)
    for D_val in D_values:
        lambda_val = lambda_nm * 1e-9
        screen_width = screen_mm * 1e-3
        b_val = b_um * 1e-6
        x_prime, fres, frau, nf_val = calculate_fresnel(b_val, lambda_val, D_val, screen_width)
        difference = fres - frau # Calcula la diferencia punto a punto
        diff_results.append((D_val, x_prime, difference, nf_val))
    return diff_results

@st.cache_data
def precompute_slit_heatmap(b_um, lambda_nm, D_m, screen_mm):
    """
    Genera una imagen 2D que simula la apariencia visual del patr√≥n de difracci√≥n.

    Toma el patr√≥n de intensidad 1D y lo repite verticalmente para crear una imagen.

    Args:
        b_um (float): Ancho de la rendija en micr√≥metros.
        lambda_nm (float): Longitud de onda en nan√≥metros.
        D_m (float): Distancia seleccionada en metros.
        screen_mm (float): Ancho de la pantalla en mil√≠metros.

    Returns:
        tuple: Una tupla conteniendo:
            - x_prime (np.array): Coordenadas de posici√≥n.
            - slit_map (np.array): Matriz 2D que representa el patr√≥n visual.
    """
    lambda_val = lambda_nm * 1e-9
    screen_width = screen_mm * 1e-3
    b_val = b_um * 1e-6
    y_res = 512 # Resoluci√≥n vertical de la imagen
    x_res = 1024 # Resoluci√≥n horizontal de la imagen

    x_prime, intensity_1D, _, _ = calculate_fresnel(b_val, lambda_val, D_m, screen_width, resolution=x_res)
    # La funci√≥n `tile` de NumPy repite el array 1D para formar una imagen 2D
    slit_map = np.tile(intensity_1D, (y_res, 1))
    return x_prime, slit_map


# --- Interfaz de Streamlit ---

# Configuraci√≥n de la p√°gina (t√≠tulo en la pesta√±a del navegador, √≠cono, layout)
st.set_page_config(page_title="Evoluci√≥n de la Difracci√≥n", page_icon="üó∫Ô∏è", layout="wide")
st.title("üó∫Ô∏è Evoluci√≥n de Fresnel a Fraunhofer")

# --- Inicializaci√≥n del Estado de la Sesi√≥n ---
# st.session_state permite que los valores de los widgets persistan entre interacciones.
# Se inicializan los valores por defecto si no existen previamente.
if "lambda_nm" not in st.session_state:
    st.session_state.lambda_nm = 592.0
if "b_um" not in st.session_state:
    st.session_state.b_um = 800.0
if "screen_mm" not in st.session_state:
    st.session_state.screen_mm = 10.0
if "D_start_m" not in st.session_state:
    st.session_state.D_start_m = 0.001
if "D_end_m" not in st.session_state:
    st.session_state.D_end_m = 5.0
if "step_m" not in st.session_state:
    st.session_state.step_m = 0.01

# --- Controles en la Barra Lateral ---
st.sidebar.header("Par√°metros Fijos")
# Sliders para los par√°metros f√≠sicos principales.
# Streamlit actualiza st.session_state autom√°ticamente gracias al argumento 'key'.
st.sidebar.slider("Longitud de Onda (Œª, nm)", 380.0, 750.0, key="lambda_nm", step=0.1, format="%.1f")
st.sidebar.slider("Ancho de la Rendija 'b' (Œºm)", 100.0, 3000.0, key="b_um", step=1.0, format="%.1f")
st.sidebar.slider("Ancho de Visualizaci√≥n (mm)", 1.0, 20.0, key="screen_mm", step=0.1, format="%.1f")

st.sidebar.markdown("---")
st.sidebar.header("Rango del Slider de Distancia")
# Controles para definir el rango del slider de distancia principal
D_start_m = st.sidebar.number_input("Distancia INICIAL (m)", 0.001, 10.0, st.session_state.D_start_m, step=0.001, format="%.3f")
D_end_m = st.sidebar.number_input("Distancia FINAL (m)", 0.001, 10.0, st.session_state.D_end_m, step=0.1, format="%.2f")
step_m = st.sidebar.number_input("Paso del slider (m)", 0.001, 1.0, st.session_state.step_m, step=0.001, format="%.3f")

# Actualiza el estado de la sesi√≥n con los valores de rango definidos por el usuario
st.session_state.D_start_m = D_start_m
st.session_state.D_end_m = D_end_m
st.session_state.step_m = step_m

# --- L√≥gica Principal y Visualizaci√≥n ---

# Valida que el rango de distancia sea coherente
if st.session_state.D_start_m >= st.session_state.D_end_m:
    st.error("Error: La 'Distancia FINAL' debe ser mayor que la 'Distancia INICIAL'. Por favor, ajusta los valores en la barra lateral.")
else:
    # Muestra un spinner mientras se ejecutan los c√°lculos pesados
    with st.spinner('Calculando patrones de difracci√≥n...'):
        slider_data = precompute_distance_data(st.session_state.b_um, st.session_state.D_start_m, st.session_state.D_end_m, st.session_state.step_m, st.session_state.lambda_nm, st.session_state.screen_mm)
        D_map, x_map, intensity_map = precompute_heatmap_data(st.session_state.b_um, st.session_state.lambda_nm, st.session_state.D_end_m, st.session_state.screen_mm)
        difference_data = precompute_difference_data(st.session_state.b_um, st.session_state.D_start_m, st.session_state.D_end_m, st.session_state.lambda_nm, st.session_state.screen_mm)

    # Calcula la distancia a la cual el N√∫mero de Fresnel es 1 (frontera Fraunhofer)
    b_val_fixed = st.session_state.b_um * 1e-6
    lambda_val_fixed = st.session_state.lambda_nm * 1e-9
    D_at_NF1 = (b_val_fixed**2) / lambda_val_fixed
    st.sidebar.metric(label="Distancia para NF=1", value=f"{D_at_NF1:.3f} m")

    st.markdown("---")
    # Slider principal para que el usuario seleccione la distancia a visualizar
    D_m_selected = st.slider("Mueve para cambiar la Distancia 'D' (m)", st.session_state.D_start_m, st.session_state.D_end_m, st.session_state.D_start_m, st.session_state.step_m)

    # --- Gr√°fico 1: Comparativa y Mapa de Evoluci√≥n ---
    fig1, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6), gridspec_kw={'width_ratios': [1, 1.5]})

    # CORRECCI√ìN: Busca la clave m√°s cercana para evitar errores de punto flotante
    # Esto asegura que siempre se encuentre un valor v√°lido en los datos precalculados.
    closest_D_key = min(slider_data.keys(), key=lambda k: abs(k - D_m_selected))
    x_prime, intensity_fresnel, intensity_fraunhofer, NF = slider_data[closest_D_key]

    # Gr√°fico de la izquierda: Comparaci√≥n 1D de patrones
    ax1.plot(x_prime * 1000, intensity_fresnel, label='Fresnel', color='dodgerblue', lw=2)
    ax1.plot(x_prime * 1000, intensity_fraunhofer, 'k--', label='Fraunhofer', lw=2)
    ax1.set_title(f'Patr√≥n a D = {closest_D_key:.3f} m  |  $N_F$ ‚âà {NF:.2f}', fontsize=14)
    ax1.set_xlabel("Posici√≥n x' (mm)"); ax1.set_ylabel('Intensidad Normalizada'); ax1.grid(True, linestyle=':'); ax1.legend(); ax1.set_ylim(0, 1.4)

    # Gr√°fico de la derecha: Mapa de calor 2D de la evoluci√≥n
    # Se usa una escala logar√≠tmica (log1p) para mejorar el contraste visual
    log_intensity_map = np.log1p(intensity_map)
    im = ax2.imshow(log_intensity_map, aspect='auto', origin='lower', extent=[D_map.min(), D_map.max(), x_map.min() * 1000, x_map.max() * 1000], cmap='hot')
    fig1.colorbar(im, ax=ax2, label='Intensidad (escala log)', fraction=0.046, pad=0.04)
    ax2.set_title(f'Evoluci√≥n para b = {st.session_state.b_um} Œºm', fontsize=14)
    ax2.set_xlabel("Distancia 'D' (m)"); ax2.set_ylabel("Posici√≥n x' (mm)")
    # L√≠neas verticales para indicar la vista actual y la frontera NF=1
    ax2.axvline(x=D_m_selected, color='cyan', linestyle='--', lw=2, label=f'Vista Actual ({D_m_selected:.2f}m)')
    if D_map.min() <= D_at_NF1 <= D_map.max(): ax2.axvline(x=D_at_NF1, color='magenta', linestyle=':', lw=3, label=f'Frontera NF=1 ({D_at_NF1:.2f}m)')
    ax2.legend(); fig1.tight_layout(pad=2.0); st.pyplot(fig1)

    # --- Gr√°fico 2: Convergencia a Fraunhofer ---
    st.markdown("---")
    fig2, ax3 = plt.subplots(figsize=(12, 6))
    cmap = plt.get_cmap('plasma') # Mapa de colores para las diferentes distancias
    ax3.axhline(0, color='red', linestyle='--', lw=1.5, label='Diferencia Cero')
    # Itera sobre los datos de diferencia precalculados y los grafica
    for i, data in enumerate(difference_data):
        D_val, x_prime_diff, difference, nf_val = data
        color = cmap(i / (len(difference_data) -1))
        label = f'D={D_val:.2f}m (NF‚âà{nf_val:.1f})'
        ax3.plot(x_prime_diff * 1000, difference, color=color, label=label)
    ax3.set_title('Convergencia a Fraunhofer', fontsize=16); ax3.set_xlabel("Posici√≥n x' (mm)"); ax3.set_ylabel('Diferencia (Fresnel - Fraunhofer)'); ax3.grid(True, linestyle=':')
    ax3.legend(title='Distancia D y N. Fresnel', fontsize=9, ncol=2); ax3.set_xlim(-st.session_state.screen_mm/2, st.session_state.screen_mm/2)
    st.pyplot(fig2)

    # --- Gr√°fico 3: Visualizaci√≥n del Patr√≥n ---
    st.markdown("---")
    st.subheader("Visualizaci√≥n del Patr√≥n de la Rendija")
    with st.spinner('Generando visualizaci√≥n del patr√≥n...'):
        # Usa la clave m√°s cercana para consistencia con el primer gr√°fico
        x_slit, slit_map = precompute_slit_heatmap(st.session_state.b_um, st.session_state.lambda_nm, closest_D_key, st.session_state.screen_mm)
        fig3, ax4 = plt.subplots(figsize=(12, 4))
        ax4.imshow(slit_map, cmap='gray', aspect='auto', extent=[x_slit.min()*1000, x_slit.max()*1000, -1, 1])
        ax4.set_title(f"Apariencia Visual del Patr√≥n a D = {closest_D_key:.3f} m")
        ax4.set_xlabel("Posici√≥n en la pantalla x' (mm)")
        ax4.get_yaxis().set_visible(False) # Oculta el eje Y que no aporta informaci√≥n
        st.pyplot(fig3)